#include "bfs.h"


void BFS::printParent(){
	bfs(1);
	cout<<"Size : " << vertices.size()<<endl;
	for(auto x:vertices){
		if(x.parent!=NULL)
			cout<<x.key+1<<"->"<<x.parent->key+1<<" ";
	}
	cout<<endl;
}

void BFS::bfs(int source){
	nontree.resize(no_of_vertices,vector<bool>(no_of_vertices,true));
	bfs_op.push_back(source);
	for(size_t index=0;index<vertices.size();index++){
		vertices[index].color=WHITE;
		vertices[index].distance=INT_MAX;
		vertices[index].parent=NULL;
	}
    vertices[source-1].color=GRAY;
    vertices[source-1].distance=0;
    vertices[source-1].parent=NULL;
    queue<Vertex *> Q;
   
    Q.push(&vertices[source-1]);
  
    while(!Q.empty()){
	Vertex *u=Q.front();
	Q.pop();
	for(size_t index=0;index<adjacencyList[u->key].size();index++){
	    if(adjacencyList[u->key][index]->color==WHITE){
	    	//cout<<"Tree edge\n";
	    	//cout<<adjacencyList[u->key][index]->key+1<<" "<<u->key+1<<endl;;
	    	bfs_op.push_back(adjacencyList[u->key][index]->key+1);
		adjacencyList[u->key][index]->color=GRAY;
		adjacencyList[u->key][index]->distance=u->distance+1;
		nontree[adjacencyList[u->key][index]->key][u->key]=false;
		adjacencyList[u->key][index]->parent=u;
		//adjacencyList[u.key][index]->parent=		//Parent address retrieval failed......
		Q.push(adjacencyList[u->key][index]);
	    }
	}
	u->color=BLACK;
    }
  
}

